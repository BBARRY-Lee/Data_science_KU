library(ggplot2)
midwest_raw <- as.data.frame(ggplot2::midwest)
View(midwest_raw)
# 1. ggplot2 의 midwest 데이터를 데이터 프레임 형태로 불러와서 데이터의 특성을 파악
head(midwest_raw)
tail(midwest_raw)
view(midwest_raw)
View(midwest_raw)
dim(midwest_raw)
str(midwest_raw)
summary(midwest_raw)
# 2. poptotal(전체 인구)을 total 로, popasian(아시아 인구)을 asian 으로 변수명을 수정
midwest_new <- midwest_raw
# 2. poptotal(전체 인구)을 total 로, popasian(아시아 인구)을 asian 으로 변수명을 수정
install.packages("dplyr")
library(dplyr)
midwest_new <- rename(midwest_new, total = poptotal)
midwest_new <- rename(midwest_new, asian = popasian)
midwest_new
midwest_new$percentage <- midwest_new%total / midwest_nwe%asian
midwest_new$percentage <- midwest_new%total / midwest_new%asian
midwest_new$percentage <- midwest_new$total/ midwest_new$asian
midwest_new$percentage <- midwest_new$total/ midwest_new$asian
midwest_new
midwest_new$percentage <- midwest_new$asian / midwest_new$total
midwest_new
midwest_new$percentage <- (midwest_new$asian / midwest_new$total) * 100
midwest_new
midwest_new$percentage <- (midwest_new$asian / midwest_new$total) * 100
midwest_new
midwest_new$percentage <- prop.table(table(midwest_new$asian / midwest_new$total)) * 100
midwest_new
prop.table(table(midwest_new$percentage))*100 <- (midwest_new$asian / midwest_new$total)
midwest_new$percentage <- (midwest_new$asian / midwest_new$total)
prop.table(table(midwest_new$percentage))*100
midwest_new$percentage <- (midwest_new$asian / midwest_new$total)
prop.table(table(midwest_new$percentage))*100
prop.table(table(midwest_new$percentage))*100
midwest_new
midwest_new$percentage <- (midwest_new$asian / midwest_new$total)*100
midwest_new
midwest_new$percentage <- (midwest_new$asian / midwest_new$total)*100
midwest_new
midwest_new$asian_percentage <- (midwest_new$asian / midwest_new$total)*100
midwest_new
midwest_new$asian-percentage <- (midwest_new$asian / midwest_new$total)*100
midwest_new$asian_percentage <- (midwest_new$asian / midwest_new$total)*100
midwest_new
midwest_new$asian_percentage <- (midwest_new$asian / midwest_new$total)*100
midwest_new
midwest_new$asian_pct <- (midwest_new$asian / midwest_new$total)*100
midwest_new
midwest_new$asianpct <- (midwest_new$asian / midwest_new$total)*100
midwest_new
dim(midwest_raw) # row, col 출력
midwest_new[c(25:28)]
midwest_new
dim(midwest_new) # row, col 출력
midwest_new <- midwest_raw
midwest_new <- rename(midwest_new, total = poptotal)
midwest_new <- rename(midwest_new, asian = popasian)
midwest_new
dim(midwest_new)
dim(midwest_raw) # row, col 출력
midwest_new$asian_percentage <- (midwest_new$asian / midwest_new$total)*100
midwest_new
dim(midwest_new)
qplot(midwest_new$county)
qplot(midwest_new$county)
# 4. 아시아 인구 백분율 전체 평균을 구하고, 평균을 초과하면 "large", 그 외에는"small"을 부여하는파생변수를 생성
asian_pct_mean <- mean(midwest_new$asian_percentage)
asian_pct_mean
midwest_new$asian_percentage_mean <- ifelse(midwest_new$asian_percentag > asian_pct_mean, "large", "small")
midwest_new
# 5. "large"와 "small"에 해당하는 지역이 얼마나 되는지, 빈도표와 빈도 막대 그래프를 만들어 확인
qplot(midwest_new$asian_percentage_mean)
# 5. "large"와 "small"에 해당하는 지역이 얼마나 되는지, 빈도표와 빈도 막대 그래프를 만들어 확인
table(midwest_new$asian_percentage_mean)
hist(midwest_new$county)
hist(midwest_new$county)
hist(x=midwest_new$county)
hist(x=midwest_new$county, main = "country", xlab="country", ylab = "d")
hist(x=midwest_new$aria, main = "country", xlab="country", ylab = "d")
hist(x=midwest_new$area, main = "country", xlab="country", ylab = "d")
hist(x=midwest_new$area, main = "country", xlab="country", ylab = "frequency")
hist(x=midwest_new$PID, main = "country", xlab="country", ylab = "frequency")
hist(x=midwest_new$state, main = "country", xlab="country", ylab = "frequency")
midwest_new$state
set(midwest_new$state)
# 5. "large"와 "small"에 해당하는 지역이 얼마나 되는지, 빈도표와 빈도 막대 그래프를 만들어 확인
table(midwest_new$asian_percentage_mean) #빈도표
table(midwest_new$state)
table(midwest_new$county)
table(midwest_new$PID)
table(midwest_new$county)
table(midwest_new$category)
# 도시.. county는 너무 많고, state가 맞다고 생각합니다.
hist(x=midwest_new$state, main = "country", xlab="country", ylab = "frequency")
str(midwest_raw) # 속성 확인
summary(midwest_raw) # 요약통계량
table(midwest_new$state)
table(midwest_new$county)
table(midwest_new$county)
hist(x=midwest_new$county, main = "country", xlab="country", ylab = "frequency")
qplot(midwest_new$asian_percentage_mean) # 빈도 막대 그래프
table(midwest_new$area)
hist(x=midwest_new$area, main = "country", xlab="country", ylab = "frequency")
hist(x=midwest_new$area, main = "Country distribution", xlab="country", ylab = "frequency")
hist(x=midwest_new$area, main = "Country distribution", xlab="Country", ylab = "frequency")
hist(x=midwest_new$county, main = "Country distribution", xlab="Country", ylab = "frequency")
plot(x=midwest_new$county, main = "Country distribution", xlab="Country", ylab = "frequency")
qplot(x=midwest_new$county, main = "Country distribution", xlab="Country", ylab = "frequency")
sum(midwest_new$area)
table(midwest_new$county)
table(midwest_new$county)
sum(midwest_new$area)
sum(midwest_new$area)
table(midwest_new$state)
table(midwest_new$county)
table(midwest_new$area)
str(midwest_raw) # 속성 확인
hist(x=midwest_new$county, main = "Country distribution", xlab="Country", ylab = "frequency")
qplot(midwest_new$asian_percentage_mean) # 빈도 막대 그래프
install.packages("ggplot2")
library(ggplot2)
midwest_raw <- as.data.frame(ggplot2::midwest)
# 2. poptotal(전체 인구)을 total 로, popasian(아시아 인구)을 asian 으로 변수명을 수정
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
midwest_new <- midwest_raw
midwest_new <- rename(midwest_new, total = poptotal)
midwest_new <- rename(midwest_new, asian = popasian)
midwest_new
# 파생변수 생성
midwest_new$asian_pct <- (midwest_new$asian / midwest_new$total) * 100
midwest_new
# 아시아 인구 백분율 전체 평균
asian_pct_mean <- mean(midwest_new$asian_pct)
# 조건문 파생변수 생성
midwest_new$asian_percentage_mean <- ifelse(midwest_new$asian_pct > asian_pct_mean, "large", "small")
midwest_new
# 5. "large"와 "small"에 해당하는 지역이 얼마나 되는지, 빈도표와 빈도 막대 그래프를 만들어 확인
table(midwest_new$asian_percentage_mean) #빈도표
qplot(midwest_new$asian_percentage_mean) # 빈도 막대 그래프
midwest_new
midwest_new
install.packages("ggplot2")
library(ggplot2)
midwdst_raw <- as.data.frame(ggplot2::midwest)
midwest_raw <- as.data.frame(ggplot2::midwest)
View(midwdst_raw)
View(midwdst_raw)
View(midwdst_raw)
rm(list=ls(midwdst_raw))
midwest_new <- midwdst_raw
View(midwdst_raw)
View(midwdst_raw)
midwest_raw <- as.data.frame(ggplot2::midwest)
midwest_new <- midwdst_raw
midwest_new <- midwest_raw
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
midwest_new$adults_pct <- (midwest_new$popadults / midwest_new$poptotal) * 100
midwest_new$adults_pct
midwest_new
midwest_new$minors_pct <- ((midwest_new$poptotal-midwest_new$popadults) / midwest_new$poptotal) * 100
midwest_new
# 문제 2. 미성년 인구 백분율이 가장 높은 상위 5 개 county(지역)의 미성년 인구 백분율을 출력
midwest_new %>% filter(manufacturer == 'country') %>%
arrange(desc(minors_pct)) %>% head(5)
# 문제 2. 미성년 인구 백분율이 가장 높은 상위 5 개 county(지역)의 미성년 인구 백분율을 출력
midwest_new %>% filter(country) %>%
arrange(desc(minors_pct)) %>% head(5)
View(midwest_raw)
# 문제 2. 미성년 인구 백분율이 가장 높은 상위 5 개 county(지역)의 미성년 인구 백분율을 출력
midwest_new %>% filter('country') %>%
arrange(desc(minors_pct)) %>% head(5)
# 문제 2. 미성년 인구 백분율이 가장 높은 상위 5 개 county(지역)의 미성년 인구 백분율을 출력
midwest_new %>% select(country) %>%
arrange(desc(minors_pct)) %>% head(5)
# 문제 2. 미성년 인구 백분율이 가장 높은 상위 5 개 county(지역)의 미성년 인구 백분율을 출력
midwest_new %>% select(county) %>%
arrange(desc(minors_pct)) %>% head(5)
# 문제 2. 미성년 인구 백분율이 가장 높은 상위 5 개 county(지역)의 미성년 인구 백분율을 출력
midwest_new %>% select(minors_pct, county) %>%
arrange(desc(minors_pct)) %>% head(5)
# 문제 2. 미성년 인구 백분율이 가장 높은 상위 5 개 county(지역)의 미성년 인구 백분율을 출력
midwest_new %>% select(county, minors_pct) %>%
arrange(desc(minors_pct)) %>% head(5)
midwest_new %>% (grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle",
ifelse(minors_pct < 30, "small")))) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle",
ifelse(minors_pct < 30, "small")))) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>% head(10)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>% head(20)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>% head(50)
View(midwest_new)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
arrange((minors_pct)) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
arrange(desc(minors_pct)) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade) %>% summarise(count = n()) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade, county) %>% summarise(count = n()) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade, county) %>% summarise(count = n()) %>% head(10)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade) %>% summarise(count = n(county)) %>% head(10)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade) %>% summarise(county, count = n()) %>% head(10)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade) %>% summarise(count = n(), county) %>% head(10)
group_by(grade) %>% select(county, minors_pct) %>% (summarise(count = n()) %>% head(10)
group_by(grade) %>% select(county, minors_pct, grade) %>% (summarise(count = n()) %>% head(10)
group_by(grade) %>% select(county) %>% (summarise(count = n()) %>% head(10)
group_by(grade)  %>% (summarise(count = n()) %>% head(10)
group_by(grade) %>% (summarise(count = n()) %>% head(10)
group_by(grade) %>% (summarise(count = n()) %>% head(10)
group_by(grade) %>% (summarise(count = n()) %>% head(10)
group_by(grade) %>% (summarise(count = n()) %>% head(10)
group_by(grade) %>% (summarise(count = n()) %>% head(10)
10
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade) %>% head(10)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade) %>% head(10)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>% group_by(grade) %>% head(10)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small")))%>% group_by(grade) %>% head(10)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade, county) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade) %>% summarise(n=n()) head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade) %>% summarise(n=n()) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(, county) %>% summarise(n=n()) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade, county) %>% summarise(n=n()) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade) %>% summarise(county=n()) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade) %>% summarise(county=county()) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade) %>% summarise(county=n()) %>% head(5)
# 문제4. popasian은 해당 지역의 아시아인 인구를 나타냅니다. '전체 인구 대비 아시아인 인구 백분율'
#        변수를 추가하고, 하위 10개 지역의 state(주), county(지역명), 아시아인 인구 백분율을 출력
midwest_new$asian_pct <- (midwest_new$popasian / midwest_new$poptotal) * 100
midwest_new
midwest_new %>% select(state, county, asian_pct) %>% arrange(asian_pct) %>% head(10)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade) %>% summarise(county=n(), count_unique = n_distinct(county)) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade) %>% summarise(county=n(), n_distinct_maker = n_distinct(county)
) %>% head(5)
midwest_new %>% mutate(grade = ifelse(minors_pct >= 40, "large",
ifelse(minors_pct >= 30, "middle", "small"))) %>%
group_by(grade) %>% summarise(county=n())
library(tidyverse)
library(readxl)
birth_df <-  read_excel("birth.xlsx")
setwd("~/Downloads/week_7_data")
birth_df <-  read_excel("birth.xlsx")
colSums(is.na(birth_df)) #colSums 함수는 변수별(가로)로 숫자 더하기
!is.na(birth_df$시점)
birth_df %>%
filter(!is.na(시점)) %>% # filter(시점 != NA)
select(시점,전국) %>%
head()
birth_df <-  birth_df %>%
filter(!is.na(시점)) %>%
select(시점,전국) %>%
separate(시점,into=c("년도","월")) #separate 함수 기능: column을 특정패턴에 따라 두개로 쪼개기
birth_df %>%
group_by(월) %>%
summarise(평균출생수 = mean(전국))
birth_df %>%
group_by(월) %>%
summarise(평균출생수 = mean(전국)) %>%
arrange(desc(평균출생수))
birth_df %>%
group_by(월) %>%
summarise(평균출생수 = mean(전국)) %>%
ggplot(data=.,aes(x=월,y=평균출생수)) +
geom_col() +
labs(title="월별 신생아 출생 평균",subtitle="1997년1월-2020년12월") +
theme_bw(base_size = 15)
#ggplot2을 이용한 시각화
install.packages("extrafont")
library(extrafont)
font_import()
theme_set(theme_gray(base_family='AppleMyungjo'))
theme_set(theme_gray(base_family='AppleMyungjo'))
birth_df %>%
group_by(월) %>%
summarise(평균출생수 = mean(전국)) %>%
ggplot(data=.,aes(x=월,y=평균출생수)) +
geom_col() +
labs(title="월별 신생아 출생 평균",subtitle="1997년1월-2020년12월") +
theme_bw(base_size = 15)
theme_set(theme_gray(base_family='NanumGothic'))
birth_df %>%
group_by(월) %>%
summarise(평균출생수 = mean(전국)) %>%
ggplot(data=.,aes(x=월,y=평균출생수)) +
geom_col() +
labs(title="월별 신생아 출생 평균",subtitle="1997년1월-2020년12월") +
theme_bw(base_size = 15)
font_import(theme_set(theme_gray(base_family='NanumGothic')))
y
font_import(theme_set(theme_gray(base_family='NanumGothic')))
font_import(theme_set(theme_gray(base_family='AppleMyungjo')))
library(ggplot2)
###
library(foreign)
library(dplyr)
raw_welfare <- read.spss("data_spss_Koweps2014.csv", to.data.frame = T)
raw_welfare <- read.spss("data_spss_Koweps2014.sav", to.data.frame = T)
raw_welfare <- read.spss("data_spss_Koweps2014.csv", to.data.frame = T)
raw_welfare <- read.spss("data_spss_Koweps2014.sav", to.data.frame = T)
###
library(foreign)
library(dplyr)
library(ggplot2)
raw_welfare <- read.spss("data_spss_Koweps2014.sav", to.data.frame = T)
raw_welfare
raw_welfare
raw_welfare.head(5)
welfare <- raw_welfare
# 데이터 탐색
dim(welfare)
str(welfare)
head(welfare)
options(max.print = 100000)
head(welfare)
summary(welfare)
# 데이터가 많으므로, 필요한 데이터만 추출 -----
welfare <- rename(welfare, sex = h0901_4) # 변수명 변경 (코딩북 참고)
# 데이터가 많으므로, 필요한 데이터만 추출 -----
# 변수명 변경 (코딩북 참고)
welfare <- rename(welfare, sex = h0901_4,
birth = h0901_5,
income = h09_din)
# 성별에 따른 소득 -----
class(welfare$sex)
summary(welfare$sex)
as.factor(Selfare$sex) # 따라서 class 변환
as.factor(welfare$sex) # 따라서 class 변환
table(welfare$sex)
welfare$sex <- ifelse(welfare$sex == 9, NA, welfare$sex) # 9는 결측치 이므로, NA로 변환
table(is.na(welfare$sex))
welfare$sex <- ifelse(welfare$sex == 1, "male", "female)
# 나이에 따른 소득 -----------------------------
# 연령에 따른 소득 -----------------------------
# 연령대 및 성별에 따른 소득 -------------------
welfare$sex <- ifelse(welfare$sex == 1, "male", "female")
qplot(welfare$sex)
## 9는 결측치 이므로, NA로 변환
welfare$sex <- ifelse(welfare$sex == 9, NA, welfare$sex)
qplot(welfare$sex)
## 소득
class(welfare$income)
summary(welfare$income)
## 소득
class(welfare$income)
summary(welfare$income)
View(welfare)
# 데이터가 많으므로, 필요한 데이터만 추출 ------
## 변수명 변경 (기존 변수명은 코딩북 참고) -----
welfare <- rename (welfare, sex = h0901_4,
birth = h0901_5,
income = h09_din)
summary(welfare$income)
## 소득
class(welfare$income)
qplot(welfare$income)
qplot(welfare$income)+xlim(0, 10000)
table(is.na(welfare$income))
table(welfare$sex)
welfare %>% groupby(sex)
welfare %>% groupby('sex')
welfare %>% groupby(sex) %>%  summarise(mean_income = mean(income))
-by(sex) %>%  summarise(mean_income = mean(income))
welfare %>% group_by(sex) %>%  summarise(mean_income = mean(income))
ggplot(data=income_mean, aes(x=sex, y=mean_income))+geom.col()
## 소득
class(welfare$income)
class(welfare$birth)
View(welfare)
summary(welfare$birth)
qplot(welfare$birth)
# 성별에 따른 소득 ------------------------------
class(welfare$sex) # 변수타입 확인
welfare$birth <- ifelse(welfare$birth == 9999, NA, welfare$birth)
table(is.na(welfare$bitrh)) # True -> 결측치 ㅇ
# 연령에 따른 소득 -----------------------------
welfare$age <- 2014-welfare$birth + 1
summary(welfare$age)
qplot(welfare$age)
%>% group_by(age) %>% summarise((mean_income = mean(income)))
age_income <- welfare %>% group_by(age) %>% summarise((mean_income = mean(income)))
ggplot(data=age_income, aes(x=age, y=mean_income))+geom_col()
welfare <- raw_welfare
# 데이터가 많으므로, 필요한 데이터만 추출 ------
## 변수명 변경 (기존 변수명은 코딩북 참고) -----
welfare <- rename (welfare, sex = h0901_4,
birth = h0901_5,
income = h09_din)
# 성별에 따른 소득 ------------------------------
class(welfare$sex) # 변수타입 확인
## 소득
class(welfare$income)
qplot(welfare$income)+xlim(0, 10000)
table(is.na(welfare$income))
# 개인조사가 아닌 가구조사이기 때문에, 성별에 따른 격차가 큼
# 그래서, 도메인 지식이 중요
welfare %>% group_by(sex) %>%  summarise(mean_income = mean(income))
ggplot(data=income_mean, aes(x=sex, y=mean_income))+geom.col()
class(welfare$birth)
summary(welfare$birth)
qplot(welfare$birth)
welfare$birth <- ifelse(welfare$birth == 9999, NA, welfare$birth)
table(is.na(welfare$bitrh)) # True -> 결측치 ㅇ
# 연령에 따른 소득 -----------------------------
welfare$age <- 2014-welfare$birth + 1
summary(welfare$age)
qplot(welfare$age)
age_income <- welfare %>% group_by(age) %>% summarise((mean_income = mean(income)))
ggplot(data=age_income, aes(x=age, y=mean_income))+geom_col()
ggplot(data=age_income, aes(x=age, y=mean_income))+geom_point()
# 개인조사가 아닌 가구조사이기 때문에, 성별에 따른 격차가 큼
# 그래서, 도메인 지식이 중요
welfare %>% group_by(sex) %>%  summarise(mean_income = mean(income))
age_income <- welfare %>% group_by(age) %>% summarise((mean_income = mean(income)))
ggplot(data=age_income, aes(x=age, y=mean_income))+geom_col()
ggplot(data=age_income, aes(x=age, y=mean_income))+geom_col()
table(is.na(welfare$bitrh)) # True -> 결측치 ㅇ
qplot(welfare$age)
wlefare <- welfare <- mutate(ageg = ifelse(age < 30, "young",
ifelse(age<=59, "middle", "old")))
table(welfare$age)
table(welfare$ageg)
qlot(welgare%ageg)
welfare_mean <- welfare %>% filter(ageg != "young") %>% group_by(ageg) %>% summarise(mean_income = mean(income))
ggplot(data=welfare_mean, aes(x=ageg, y=mean_income))+geom_col()
welfare_mean <- welfare %>% filter(ageg != "young") %>% group_by(ageg) %>% summarise(mean_income = mean(income))
age_income <- welfare %>% group_by(age) %>% summarise((mean_income = mean(income)))
ggplot(data=age_income, aes(x=age, y=mean_income))+geom_col()
ggplot(data=age_income, aes(x=age, y=mean_income))+geom_point()
wlefare <- welfare <- mutate(ageg = ifelse(age < 30, "young",
ifelse(age<=59, "middle", "old")))
wlefare <- welfare %>%  mutate(ageg = ifelse(age < 30, "young",
ifelse(age <= 59, "middle", "old")))
table(welfare$ageg)
qlot(welgare%ageg)
wlefare <- welfare %>% mutate(ageg = ifelse(age < 30, "young",
ifelse(age <= 59, "middle", "old")))
table(welfare$ageg)
qlot(welgare%ageg)
qlot(welfare%ageg)
welfare_mean <- welfare %>% filter(ageg != "young") %>%
group_by(ageg, sex) %>% summarise((mean_income = mean(income)))
ggplot(data=welfare_mean, aes(x=ageg, y=mean_income)) + geom_col()
# fill -> 그래프에 색 지정
ggplot(data=welfare_mean, aes(x=ageg, y=mean_income, fill = sex)) + geom_col(position = "dodge")
class(welfare$birth)
summary(welfare$birth)
# 연령에 따른 소득 -----------------------------
welfare$age <- 2014-welfare$birth + 1
age_income <- welfare %>% group_by(age) %>% summarise((mean_income = mean(income)))
ggplot(data=age_income, aes(x=age, y=mean_income))+geom_col()
ggplot(data=age_income, aes(x=age, y=mean_income))+geom_point()
